// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const LOG_STORAGE_KEY = 'tgstyle_app_logs';
const MAX_STORED_LOGS = 1000;
// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è apiUrl, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
window.apiUrl = 'https://tgstyle.flappy.crazedns.ru/api';

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = {
    logs: [],
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∏–∑ localStorage, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        try {
            const storedLogs = localStorage.getItem(LOG_STORAGE_KEY);
            if (storedLogs) {
                this.logs = JSON.parse(storedLogs);
                console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.logs.length} —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –∏–∑ localStorage:', error);
        }
        
        // –°–æ–∑–¥–∞–µ–º UI –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        this.createLogUI();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            this.log('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ' + event.message, 'error', {
                filename: event.filename,
                lineno: event.lineno,
                colno: event.colno,
                stack: event.error ? event.error.stack : null
            });
            this.saveLogs();
        });
        
        console.log('–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        return this;
    },
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    createLogUI() {
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        const viewLogsBtn = document.createElement('button');
        viewLogsBtn.id = 'view-logs-btn';
        viewLogsBtn.textContent = 'üîç –õ–æ–≥–∏';
        viewLogsBtn.style.cssText = `
            position: fixed;
            bottom: 10px;
            right: 10px;
            padding: 8px 12px;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            border: none;
            border-radius: 4px;
            font-size: 12px;
            z-index: 9999;
            cursor: pointer;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
        const logModal = document.createElement('div');
        logModal.id = 'log-modal';
        logModal.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 10000;
            display: none;
            flex-direction: column;
            color: white;
            font-family: monospace;
            padding: 10px;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const modalHeader = document.createElement('div');
        modalHeader.style.cssText = `
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        `;
        
        const modalTitle = document.createElement('h3');
        modalTitle.textContent = '–ñ—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
        modalTitle.style.margin = '0';
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–æ–≤
        const logContent = document.createElement('div');
        logContent.id = 'log-content';
        logContent.style.cssText = `
            flex: 1;
            overflow-y: auto;
            background-color: rgba(0, 0, 0, 0.5);
            padding: 10px;
            border-radius: 4px;
            font-size: 11px;
            white-space: pre-wrap;
        `;
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∞–º–∏
        const logToolbar = document.createElement('div');
        logToolbar.style.cssText = `
            display: flex;
            justify-content: flex-start;
            gap: 10px;
            margin-top: 10px;
        `;
        
        const copyLogsBtn = document.createElement('button');
        copyLogsBtn.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
        copyLogsBtn.className = 'log-btn';
        
        const sendLogsBtn = document.createElement('button');
        sendLogsBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
        sendLogsBtn.className = 'log-btn';
        
        const clearLogsBtn = document.createElement('button');
        clearLogsBtn.textContent = '–û—á–∏—Å—Ç–∏—Ç—å';
        clearLogsBtn.className = 'log-btn';
        
        const exitLogsBtn = document.createElement('button');
        exitLogsBtn.textContent = '–í—ã—Ö–æ–¥';
        exitLogsBtn.className = 'log-btn';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        const style = document.createElement('style');
        style.textContent = `
            .log-btn {
                padding: 6px 12px;
                background-color: #40a7e3;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
            }
            .log-btn:hover {
                background-color: #2c7db2;
            }
            .log-entry {
                margin-bottom: 4px;
                padding-bottom: 4px;
                border-bottom: 1px solid rgba(255,255,255,0.1);
            }
            .log-info { color: #90caf9; }
            .log-debug { color: #80deea; }
            .log-warn { color: #ffcc80; }
            .log-error { color: #ef9a9a; }
        `;
        
        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É UI
        modalHeader.appendChild(modalTitle);
        
        logToolbar.appendChild(copyLogsBtn);
        logToolbar.appendChild(sendLogsBtn);
        logToolbar.appendChild(clearLogsBtn);
        logToolbar.appendChild(exitLogsBtn);
        
        logModal.appendChild(modalHeader);
        logModal.appendChild(logContent);
        logModal.appendChild(logToolbar);
        
        document.head.appendChild(style);
        document.body.appendChild(viewLogsBtn);
        document.body.appendChild(logModal);
        
        // –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫
        viewLogsBtn.addEventListener('click', () => {
            this.updateLogDisplay();
            logModal.style.display = 'flex';
        });
        
        copyLogsBtn.addEventListener('click', () => {
            const logText = this.formatLogsForExport();
            navigator.clipboard.writeText(logText)
                .then(() => {
                    alert('–õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤:', err);
                    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: ' + err.message);
                });
        });
        
        sendLogsBtn.addEventListener('click', () => {
            this.sendLogsToServer();
        });
        
        clearLogsBtn.addEventListener('click', () => {
            if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏?')) {
                this.clearLogs();
                this.updateLogDisplay();
            }
        });
        
        exitLogsBtn.addEventListener('click', () => {
            logModal.style.display = 'none';
        });
    },
    
    // –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    updateLogDisplay() {
        const logContent = document.getElementById('log-content');
        if (!logContent) return;
        
        logContent.innerHTML = '';
        
        if (this.logs.length === 0) {
            logContent.innerHTML = '<em>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –∂—É—Ä–Ω–∞–ª–µ</em>';
            return;
        }
        
        const logsToShow = this.logs.slice(-500); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 500 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        logsToShow.forEach(log => {
            const logEntry = document.createElement('div');
            logEntry.className = `log-entry log-${log.level}`;
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥
            logEntry.innerHTML = `
                <strong>[${log.timestamp}]</strong> 
                <span class="log-level">[${log.level.toUpperCase()}]</span> 
                <span class="log-message">${log.message}</span>
                <br><small class="log-caller">${log.caller}</small>
                ${log.data ? `<br><small class="log-data">${log.data}</small>` : ''}
            `;
            
            logContent.appendChild(logEntry);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ª–æ–≥—É
        logContent.scrollTop = logContent.scrollHeight;
    },
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    formatLogsForExport() {
        return this.logs.map(log => {
            return `[${log.timestamp}] [${log.level.toUpperCase()}] ${log.message} (${log.caller})${log.data ? '\n  –î–∞–Ω–Ω—ã–µ: ' + log.data : ''}`;
        }).join('\n');
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ localStorage
    saveLogs() {
        try {
            // –û–±—Ä–µ–∑–∞–µ–º –ª–æ–≥–∏, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
            if (this.logs.length > MAX_STORED_LOGS) {
                this.logs = this.logs.slice(-MAX_STORED_LOGS);
            }
            
            localStorage.setItem(LOG_STORAGE_KEY, JSON.stringify(this.logs));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ –≤ localStorage:', error);
        }
    },
    
    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    clearLogs() {
        this.logs = [];
        this.saveLogs();
    },
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    getCallerInfo() {
        try {
            const stackTrace = new Error().stack;
            const lines = stackTrace.split('\n');
            
            // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Å–∞–º Error()
            // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –≤—ã–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ (log)
            // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ –≤—ã–∑–æ–≤ Logger.log –∏–ª–∏ appLogger
            // –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ - –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            if (lines.length >= 4) {
                const callerLine = lines[3].trim();
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
                const functionMatch = callerLine.match(/at\s+([^\s]+)\s+\((.+):(\d+):(\d+)\)/);
                if (functionMatch) {
                    const [_, functionName, file, line, col] = functionMatch;
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
                    const fileName = file.split('/').pop();
                    return `${functionName} –≤ ${fileName}:${line}`;
                }
                
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ –ø–µ—Ä–≤–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
                const anonymousMatch = callerLine.match(/at\s+(.+):(\d+):(\d+)/);
                if (anonymousMatch) {
                    const [_, file, line, col] = anonymousMatch;
                    const fileName = file.split('/').pop();
                    return `${fileName}:${line}`;
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
                return callerLine.replace(/^\s*at\s+/, '');
            }
            
            return '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        } catch (e) {
            return '–æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è';
        }
    },
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log(message, level = 'info', data = null, caller = null) {
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        const callerInfo = caller || this.getCallerInfo();
        
        // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
        const timestamp = new Date().toISOString();
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–æ–≥–∞
        const logEntry = {
            timestamp,
            level,
            message,
            caller: callerInfo,
            data: data ? JSON.stringify(data) : null
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –ª–æ–≥–æ–≤
        this.logs.push(logEntry);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
        const consoleMsg = `[${timestamp}] [${level.toUpperCase()}] ${message} (${callerInfo})`;
        switch (level) {
            case 'error':
                console.error(consoleMsg, data || '');
                break;
            case 'warn':
                console.warn(consoleMsg, data || '');
                break;
            case 'debug':
                console.debug(consoleMsg, data || '');
                break;
            default:
                console.log(consoleMsg, data || '');
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ localStorage
        this.saveLogs();
        
        return logEntry;
    },
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    sendLogsToServer() {
        const logContent = document.getElementById('log-content');
        if (!logContent) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
        const previousContent = logContent.innerHTML;
        logContent.innerHTML = '<div style="text-align: center; padding: 20px;">–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...</div>';
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const logsData = {
            logs: this.logs,
            userAgent: navigator.userAgent,
            appVersion: '1.0.0', // –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            timestamp: new Date().toISOString()
        };
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch(`${window.apiUrl}/log-error`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(logsData)
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                logContent.innerHTML = '<div style="text-align: center; padding: 20px; color: #81c784;">–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä!</div>';
                setTimeout(() => {
                    logContent.innerHTML = previousContent;
                }, 2000);
            } else {
                throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        })
        .catch(error => {
            logContent.innerHTML = `<div style="text-align: center; padding: 20px; color: #e57373;">–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ–≤: ${error.message}</div>`;
            setTimeout(() => {
                logContent.innerHTML = previousContent;
            }, 3000);
        });
    }
};

/**
 * –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
 * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤—ã–∑–æ–≤—ã appLogger –≤ Logger.log
 */
function appLogger(message, level = 'info', data = null) {
    return Logger.log(message, level, data, 'appLogger');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç Logger –∏ —Ñ—É–Ω–∫—Ü–∏—é appLogger
window.Logger = Logger;
window.appLogger = appLogger;
