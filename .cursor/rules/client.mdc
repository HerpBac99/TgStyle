---
description: TgStyle - Telegram Mini App для анализа стиля одежды с использованием ИИ
globs:
alwaysApply: true
---

# TgStyle Client - Описание клиентской части

## Обзор проекта

**TgStyle** - это Telegram Mini App для анализа стиля одежды пользователей с помощью искусственного интеллекта. Приложение позволяет загружать фотографии одежды или указывать Pinterest URL для получения рекомендаций по стилю.

## Архитектура клиентской части

### Структура файлов

```
client/
├── package.json          # Конфигурация проекта и зависимости
├── public/              # Статические файлы
│   ├── index.html       # Главная HTML страница
│   ├── styles.css       # Стили приложения
│   ├── scripts.js       # Основная логика клиента
│   ├── logger.js        # Система логирования
│   └── MainPageStruct.md # Структура главной страницы
```

### Технологии

- **Frontend**: Vanilla JavaScript (без фреймворков)
- **Стилизация**: CSS с CSS-переменными
- **Telegram Integration**: Telegram WebApp API
- **Статический хостинг**: Serve для разработки
- **Логирование**: Собственная система с отправкой на сервер

## Основные компоненты

### 1. Инициализация приложения (`scripts.js`)

**Функция `initApp()`**:
- Устанавливает обработчики событий
- Запрещает скроллинг для мобильных устройств
- Входит в полноэкранный режим в Telegram
- Применяет тему приложения
- Загружает профиль пользователя
- Начинает процесс авторизации

### 2. Авторизация и профиль пользователя

**Функция `checkAuth()`**:
- Получает данные пользователя из Telegram WebApp
- Отправляет данные на сервер для валидации
- Обрабатывает ошибки сети и сервера
- Поддерживает локальное тестирование без авторизации

**Функция `loadUserProfile()`**:
- Извлекает информацию о пользователе (имя, фото)
- Отображает профиль в правом верхнем углу
- Обрабатывает отсутствие фото профиля

### 3. Работа с изображениями

**Функция `showFileSelection()`**:
- Предоставляет выбор между камерой и галереей
- Использует HTML5 File API
- Поддерживает `capture="camera"` для мобильных устройств

**Функция `compressImage()`**:
- Сжимает изображения перед отправкой на сервер
- Поддерживает настройку качества JPEG
- Ограничивает размеры и вес файла
- Использует Canvas API для обработки

### 4. Анализ изображений

**Отправка на анализ**:
- Сжимает фото перед отправкой
- Отправляет POST-запрос на `/api/analyze`
- Обрабатывает ответ сервера с результатами
- Сохраняет результаты в историю

**Отображение результатов**:
- Показывает тип определенной одежды
- Отображает уверенность классификации
- Генерирует персональные рекомендации
- Создает облака комментариев в стиле чата

### 5. История анализов

**Локальное хранение** (`localStorage`):
- Хранит последние 4 анализа
- Оптимизирует размер изображений перед сохранением
- Управляет лимитами хранения (4MB)

**Функции управления историей**:
- `saveCurrentAnalysis()` - сохраняет новый анализ
- `loadHistoryFromStorage()` - загружает историю при запуске
- `updateHistoryCells()` - обновляет отображение сетки
- `deleteHistoryItem()` - удаляет элемент по индексу

### 6. Пользовательский интерфейс

**Главная страница**:
- Заголовок "TgStyle" с каллиграфическим шрифтом
- Профиль пользователя в правом верхнем углу
- Сетка из 4 ячеек для истории анализов
- Круглая кнопка камеры в нижней части

**Полноэкранный предпросмотр**:
- Отображение загруженного фото на весь экран
- Кнопки "Назад" и "Анализировать" в нижней панели
- Анимация появления с размытием

**Всплывающие уведомления**:
- Toast с результатами классификации
- Временные сообщения об ошибках
- Стильные анимации появления/исчезновения

### 7. Система логирования

**Logger.js**:
- Инициализация системы логирования
- Создание UI для просмотра логов
- Сохранение логов в localStorage
- Отправка логов на сервер
- Перехват необработанных ошибок

**Функции логирования**:
- `appLogger()` - основная функция логирования
- Уровни: debug, info, warn, error
- Форматированный вывод в консоль
- Сохранение с метками времени

## Стилизация

### CSS-переменные
```css
:root {
  --tg-theme-bg-color: #81D8D0;        /* Бирюзовый фон Tiffany */
  --tg-theme-text-color: #000000;      /* Черный текст */
  --tg-theme-button-color: #40a7e3;    /* Синие кнопки */
  --cloud-color-1: #e3f2fd;           /* Светло-голубые облака */
  --cloud-color-2: #e8f5e9;           /* Светло-зеленые облака */
  --cloud-color-3: #fff8e1;           /* Светло-желтые облака */
}
```

### Адаптивный дизайн
- Максимальная ширина: 500px
- Поддержка различных размеров экранов
- Touch-friendly интерфейс
- Оптимизация для мобильных устройств

## API интеграция

### Telegram WebApp API
- `tg.expand()` - развертывание на весь экран
- `tg.enableClosingConfirmation()` - подтверждение закрытия
- `tg.initData` - данные авторизации
- `tg.initDataUnsafe.user` - информация о пользователе

### Серверные эндпоинты
- `POST /api/auth` - авторизация
- `POST /api/analyze` - анализ изображения
- `POST /api/log-error` - отправка логов

## Особенности реализации

### Обработка ошибок
- Валидация входных данных
- Graceful degradation при ошибках сети
- Пользовательские сообщения об ошибках
- Логирование всех исключений

### Оптимизация производительности
- Сжатие изображений перед отправкой
- Лимиты на размер истории
- Асинхронная обработка
- Минимизация перерисовок DOM

### Безопасность
- Валидация данных от Telegram
- Проверка размеров файлов
- Ограничение типов файлов (только изображения)

## Будущие улучшения

### Планируемые функции
- Интеграция Pinterest API
- Расширенный анализ стиля
- Рекомендации по сочетанию одежды
- Социальные функции (поделиться результатом)
- Темная тема Telegram

### Технические улучшения
- Переход на React/Vue для лучшей архитектуры
- Service Worker для оффлайн работы
- WebRTC для прямой работы с камерой
- PWA возможности

## Запуск и разработка

### Локальная разработка
```bash
cd client
npm install
npm start
```

### Сборка для продакшена
```bash
npm run build  # если настроен build скрипт
```

## Заключение

Клиентская часть TgStyle представляет собой полнофункциональное Telegram Mini App с современным UI/UX, интеграцией с Telegram API, локальным хранением данных и комплексной системой логирования. Приложение готово к расширению и добавлению новых функций анализа стиля.
