const express = require('express');
const https = require('https');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
require('dotenv').config({ path: path.join(__dirname, '..', '.env') });

// –ò–º–ø–æ—Ä—Ç API —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./src/api/auth');
const analyzeRoutes = require('./src/api/analyze');
const apiRoutes = require('./routes/api');

// –°–æ–∑–¥–∞–Ω–∏–µ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è FastVLM —Å–µ—Ä–≤–µ—Ä–∞
let fastvlmProcess = null;

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(cors());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Middleware –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
app.use(express.static(path.join(__dirname, '..', 'client')));

// API —Ä–æ—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/analyze', analyzeRoutes);
app.use('/api', apiRoutes);

// –†–æ—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'client', 'index.html'));
});

// –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', (req, res) => {
  res.json({
    success: true,
    message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString(),
    domain: process.env.DOMAIN || 'localhost',
    port: process.env.PORT || 443
  });
});

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('Error:', error.message);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥
  let statusCode = 500;
  let errorCode = 'INTERNAL_ERROR';
  let userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
  if (error.name === 'ValidationError') {
    statusCode = 400;
    errorCode = 'VALIDATION_ERROR';
    userMessage = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
  } else if (error.name === 'UnauthorizedError' || error.message.includes('Unauthorized')) {
    statusCode = 401;
    errorCode = 'UNAUTHORIZED';
    userMessage = '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
  }

  res.status(statusCode).json({
    success: false,
    error: error.name || 'Error',
    message: userMessage,
    code: errorCode,
    timestamp: new Date().toISOString()
  });
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FastVLM —Å–µ—Ä–≤–µ—Ä–æ–º
function startFastVLMServer() {
    return new Promise((resolve, reject) => {
        try {
            const { spawn } = require('child_process');
            const fastvlmPath = path.join(__dirname, 'src/utils/fastvlm_server.py');
            const pythonPath = path.join(__dirname, '../fastvlm_env/Scripts/python.exe');

            console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastVLM —Å–µ—Ä–≤–µ—Ä...');

            fastvlmProcess = spawn(pythonPath, [fastvlmPath], {
                cwd: path.join(__dirname, '../'),
                stdio: ['pipe', 'pipe', 'pipe']
            });

            let startupTimeout = setTimeout(() => {
                console.log('‚è∞ FastVLM —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ');
                resolve(false);
            }, 30000);

            // –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
            fastvlmProcess.stdout.on('data', (data) => {
                const output = data.toString();
                console.log('FastVLM stdout:', output);

                if (output.includes('FastVLM –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞')) {
                    clearTimeout(startupTimeout);
                    console.log('‚úÖ FastVLM —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
                    resolve(true);
                }
            });

            fastvlmProcess.stderr.on('data', (data) => {
                console.log('FastVLM stderr:', data.toString());
            });

            fastvlmProcess.on('close', (code) => {
                console.log(`FastVLM –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
                fastvlmProcess = null;
            });

            fastvlmProcess.on('error', (error) => {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ FastVLM:', error);
                clearTimeout(startupTimeout);
                resolve(false);
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ FastVLM —Å–µ—Ä–≤–µ—Ä–∞:', error);
            resolve(false);
        }
    });
}

function stopFastVLMServer() {
    if (fastvlmProcess) {
        console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FastVLM —Å–µ—Ä–≤–µ—Ä...');
        fastvlmProcess.kill();
        fastvlmProcess = null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTPS —Å–µ—Ä–≤–µ—Ä–∞
function createHttpsServer() {
  try {
    // –ü—É—Ç–∏ –∫ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º
    const keyPath = process.env.HTTPS_KEY_PATH || path.join(__dirname, '..', 'ssl', 'keys', 'server.key');
    const certPath = process.env.HTTPS_CERT_PATH || path.join(__dirname, '..', 'ssl', 'certs', 'server.crt');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if (!fs.existsSync(keyPath)) {
      throw new Error(`SSL –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: ${keyPath}`);
    }

    if (!fs.existsSync(certPath)) {
      throw new Error(`SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${certPath}`);
    }

    // –ß–∏—Ç–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    const httpsOptions = {
      key: fs.readFileSync(keyPath),
      cert: fs.readFileSync(certPath)
    };

    return https.createServer(httpsOptions, app);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTPS —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
    console.log('–î–ª—è —Ä–∞–±–æ—Ç—ã Telegram Mini App —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    console.log('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  const port = process.env.PORT || 443;
  const domain = process.env.DOMAIN || 'localhost';

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.DOMAIN) {
    console.error('–û—à–∏–±–∫–∞: DOMAIN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º FastVLM —Å–µ—Ä–≤–µ—Ä
  console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastVLM —Å–µ—Ä–≤–µ—Ä–∞...');
  const fastvlmStarted = await startFastVLMServer();
  if (fastvlmStarted) {
    console.log('‚úÖ FastVLM —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤');
  } else {
    console.log('‚ö†Ô∏è FastVLM —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏');
  }

  // –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
  const server = createHttpsServer();

  server.listen(port, () => {
    const serverInfo = {
      port,
      domain,
      nodeEnv: 'production'
    };

    console.log(`HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`Telegram Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://${domain}`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGTERM', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    stopFastVLMServer();
    server.close(() => {
      console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });

  process.on('SIGINT', () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    stopFastVLMServer();
    server.close(() => {
      console.log('–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  startServer();
}

module.exports = app; 