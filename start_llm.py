#!/usr/bin/env python3
"""
FastVLM Server Launcher
–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastVLM —Å–µ—Ä–≤–µ—Ä–∞
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def main():
    print("–ó–∞–ø—É—Å–∫ FastVLM —Å–µ—Ä–≤–µ—Ä–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    try:
        import torch
        if torch.cuda.is_available():
            gpu_name = torch.cuda.get_device_name(0)
            print(f"GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {gpu_name}")
        else:
            print("GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    except ImportError:
        print("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ GPU –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    current_dir = Path(__file__).parent
    fastvlm_dir = current_dir / "fastvlm-server"

    if not fastvlm_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {fastvlm_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—é (–§–∞–∑–∞ 0.1)")
        sys.exit(1)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É fastvlm-server
    os.chdir(fastvlm_dir)
    print(f"üìç –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–∞–ø–∫—É: {fastvlm_dir}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Python –∫–æ–º–∞–Ω–¥—É
    python_cmd = sys.executable  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Python —á—Ç–æ –∏ —Ç–µ–∫—É—â–∏–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    venv_path = fastvlm_dir / "venv"
    if venv_path.exists():
        print("üì¶ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

        if platform.system() == "Windows":
            python_cmd = str(venv_path / "Scripts" / "python.exe")
        else:
            python_cmd = str(venv_path / "bin" / "python")

        if not os.path.exists(python_cmd):
            print("‚ö†Ô∏è  –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ Python –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            python_cmd = sys.executable

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    requirements_file = fastvlm_dir / "requirements.txt"
    if not requirements_file.exists():
        print("‚ö†Ô∏è  requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
        requirements_content = """Flask==2.3.3
Pillow==10.0.0
torch==2.0.1
torchvision==0.15.2
transformers==4.21.3
accelerate==0.20.3
psutil==5.9.0
python-dotenv==1.0.0"""

        with open(requirements_file, 'w') as f:
            f.write(requirements_content)
        print("‚úÖ requirements.txt —Å–æ–∑–¥–∞–Ω")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if venv_path.exists() and python_cmd != sys.executable:
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        try:
            subprocess.run([python_cmd, "-m", "pip", "install", "-r", "requirements.txt"],
                         check=True, capture_output=True)
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            print("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("üöÄ –ó–∞–ø—É—Å–∫ FastVLM —Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        subprocess.run([python_cmd, "server.py"])
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
